/*
 * Stationsdatenbereitstellung
 * An API providing master data for german railway stations by DB Station&Service AG.
 *
 * OpenAPI spec version: 2.2.01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.github.martintaraz.dbdatapublisherbot.models.stations;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.github.martintaraz.dbdatapublisherbot.models.stations.GeographicPoint;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;

/**
 * RiL100Identifier
 */
@javax.annotation.processing.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-12-07T20:50:44.823+01:00")
public class RiL100Identifier {
  @SerializedName("rilIdentifier")
  private String rilIdentifier = null;

  @SerializedName("isMain")
  private Boolean isMain = null;

  @SerializedName("hasSteamPermission")
  private Boolean hasSteamPermission = null;

  @SerializedName("geographicCoordinate")
  private GeographicPoint geographicCoordinate = null;

  public RiL100Identifier rilIdentifier(String rilIdentifier) {
    this.rilIdentifier = rilIdentifier;
    return this;
  }

   /**
   * Unique identifier of &#39;Betriebsstelle&#39; according to Ril100
   * @return rilIdentifier
  **/
  @ApiModelProperty(value = "Unique identifier of 'Betriebsstelle' according to Ril100")
  public String getRilIdentifier() {
    return rilIdentifier;
  }

  public void setRilIdentifier(String rilIdentifier) {
    this.rilIdentifier = rilIdentifier;
  }

  public RiL100Identifier isMain(Boolean isMain) {
    this.isMain = isMain;
    return this;
  }

   /**
   * is stations main Ril100. Determination of Station&amp;Service AG
   * @return isMain
  **/
  @ApiModelProperty(value = "is stations main Ril100. Determination of Station&Service AG")
  public Boolean isIsMain() {
    return isMain;
  }

  public void setIsMain(Boolean isMain) {
    this.isMain = isMain;
  }

  public RiL100Identifier hasSteamPermission(Boolean hasSteamPermission) {
    this.hasSteamPermission = hasSteamPermission;
    return this;
  }

   /**
   * permission for steam engines y/n
   * @return hasSteamPermission
  **/
  @ApiModelProperty(value = "permission for steam engines y/n")
  public Boolean isHasSteamPermission() {
    return hasSteamPermission;
  }

  public void setHasSteamPermission(Boolean hasSteamPermission) {
    this.hasSteamPermission = hasSteamPermission;
  }

  public RiL100Identifier geographicCoordinate(GeographicPoint geographicCoordinate) {
    this.geographicCoordinate = geographicCoordinate;
    return this;
  }

   /**
   * Get geographicCoordinate
   * @return geographicCoordinate
  **/
  @ApiModelProperty(value = "")
  public GeographicPoint getGeographicCoordinate() {
    return geographicCoordinate;
  }

  public void setGeographicCoordinate(GeographicPoint geographicCoordinate) {
    this.geographicCoordinate = geographicCoordinate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiL100Identifier riL100Identifier = (RiL100Identifier) o;
    return Objects.equals(this.rilIdentifier, riL100Identifier.rilIdentifier) &&
        Objects.equals(this.isMain, riL100Identifier.isMain) &&
        Objects.equals(this.hasSteamPermission, riL100Identifier.hasSteamPermission) &&
        Objects.equals(this.geographicCoordinate, riL100Identifier.geographicCoordinate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rilIdentifier, isMain, hasSteamPermission, geographicCoordinate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiL100Identifier {\n");
    
    sb.append("    rilIdentifier: ").append(toIndentedString(rilIdentifier)).append("\n");
    sb.append("    isMain: ").append(toIndentedString(isMain)).append("\n");
    sb.append("    hasSteamPermission: ").append(toIndentedString(hasSteamPermission)).append("\n");
    sb.append("    geographicCoordinate: ").append(toIndentedString(geographicCoordinate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

